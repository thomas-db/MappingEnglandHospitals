!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.stardogjs=t()}(this,function(){"use strict";function e(e,t){return t={exports:{}},e(t,t.exports),t.exports}function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function r(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}function o(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function a(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function i(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function s(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(Le);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],a=n.cache;if(a.has(o))return a.get(o);var i=e.apply(this,r);return n.cache=a.set(o,i)||a,i};return n.cache=new(s.Cache||Ne),n}function u(e){if("string"==typeof e)return e;if(F(e))return Ke(e,u)+"";if(ne(e))return Ze?Ze.call(e):"";var t=e+"";return"0"==t&&1/e==-Xe?"-0":t}function c(e,t,n,r,o){var a=-1,i=e.length;for(n||(n=Pt),o||(o=[]);++a<i;){var s=e[a];t>0&&n(s)?t>1?c(s,t-1,n,r,o):At(o,s):r||(o[o.length]=s)}return o}var d="Stardog JavaScript Framework for node.js and the browser - Develop apps using the Stardog RDF Database & JS.",l=["stardog","rdf","sparql","library","semantic web","linked data","query"],p={name:"Stardog Union",url:"http://stardog.com"},h=[{name:"Edgar Rodriguez",email:"edgar@complexible.com"},{name:"Fernando Hernandez",email:"fernando@complexible.com"},{name:"Maurice Rabb",email:"github@mauricerabb.com"},{name:"Laszlo"},{name:"Jonathan Abourbih",email:"jon.abourbih+github@gmail.com"},{name:"Andhika Nugraha",email:"andhika.nugraha@outlook.com"},{name:"BeArnis"},{name:"Ron Michael Zettlemoyer",email:"ron@zettlemoyer.com"},{name:"Stephen Nowell",email:"stephen@stardog.com"},{name:"Adam Bretz",email:"arbretz@gmail.com"},{name:"sofayam"}],f={type:"git",url:"https://github.com/stardog-union/stardog.js"},y={url:"https://github.com/stardog-union/stardog.js/issues"},v={"fetch-ponyfill":"^4.1.0",flat:"^2.0.1","form-data":"^2.2.0","isomorphic-base64":"^1.0.2",lodash:"^4.17.4",querystring:"^0.2.0"},b={"@types/jest":"^20.0.2","babel-plugin-transform-es2015-modules-commonjs":"^6.24.1","babel-preset-es2015-rollup":"^3.0.0",chalk:"^2.0.1",eslint:"^4.2.0","eslint-config-airbnb-base":"^11.2.0","eslint-config-prettier":"^2.3.0","eslint-plugin-import":"^2.7.0","eslint-plugin-prettier":"^2.1.2",husky:"^0.13.4",jest:"^20.0.4","lint-staged":"^4.0.0",mdchangelog:"^0.8.0",prettier:"^1.4.4",randomstring:"^1.1.5",rollup:"^0.43.0","rollup-plugin-babel":"^2.7.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-eslint":"^3.0.0","rollup-plugin-json":"^2.3.0","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-uglify":"^2.0.1",typedocs:"^0.6.3"},m={node:">=6.0.0"},g={build:"node scripts/build",docs:"node scripts/docs",test:"eslint '{lib,test}/**/*.js' --fix && jest test/*.spec.js --verbose -i",precommit:"lint-staged",format:"prettier '{lib,test}/**/*.js' --single-quote --trailing-comma es5 --write",version:"mdchangelog --remote stardog-union/stardog.js --no-prologue --order-milestones semver --order-issues closed_at --overwrite --no-orphan-issues && npm run docs && git add README.md CHANGELOG.md",prepublishOnly:"npm run build"},j={name:"stardog",version:"1.0.0-20170913-1604",description:d,keywords:l,main:"lib/index.js",browser:"dist/stardog.js",types:"lib/index.d.ts",author:p,license:"Apache-2.0",contributors:h,repository:f,bugs:y,dependencies:v,devDependencies:b,engines:m,scripts:g,"lint-staged":{linters:{"{lib,test}/**/*.js":["prettier --single-quote --trailing-comma es5 --write","git add"]}},"stardog-version":">=5.0.0"},w=Object.freeze({name:"stardog",version:"1.0.0-20170913-1604",description:d,keywords:l,main:"lib/index.js",browser:"dist/stardog.js",types:"lib/index.d.ts",author:p,license:"Apache-2.0",contributors:h,repository:f,bugs:y,dependencies:v,devDependencies:b,engines:m,scripts:g,default:j}),T="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},O=e(function(e,t){!function(t){function n(e){var n=e&&e.Promise||t.Promise,r=e&&e.XMLHttpRequest||t.XMLHttpRequest,o=t;return function(){var e=Object.create(o,{fetch:{value:void 0,writable:!0}});return function(e){function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function o(e){return"string"!=typeof e&&(e=String(e)),e}function a(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return g.iterable&&(t[Symbol.iterator]=function(){return t}),t}function i(e){this.map={},e instanceof i?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function s(e){if(e.bodyUsed)return n.reject(new TypeError("Already read"));e.bodyUsed=!0}function u(e){return new n(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function c(e){var t=new FileReader,n=u(t);return t.readAsArrayBuffer(e),n}function d(e){var t=new FileReader,n=u(t);return t.readAsText(e),n}function l(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}function p(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function h(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(g.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(g.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(g.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(g.arrayBuffer&&g.blob&&w(e))this._bodyArrayBuffer=p(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!g.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!T(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=p(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):g.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},g.blob&&(this.blob=function(){var e=s(this);if(e)return e;if(this._bodyBlob)return n.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return n.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return n.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?s(this)||n.resolve(this._bodyArrayBuffer):this.blob().then(c)}),this.text=function(){var e=s(this);if(e)return e;if(this._bodyBlob)return d(this._bodyBlob);if(this._bodyArrayBuffer)return n.resolve(l(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return n.resolve(this._bodyText)},g.formData&&(this.formData=function(){return this.text().then(v)}),this.json=function(){return this.text().then(JSON.parse)},this}function f(e){var t=e.toUpperCase();return O.indexOf(t)>-1?t:e}function y(e,t){var n=(t=t||{}).body;if(e instanceof y){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new i(e.headers)),this.method=e.method,this.mode=e.mode,n||null==e._bodyInit||(n=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new i(t.headers)),this.method=f(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function v(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}}),t}function b(e){var t=new i;return e.split(/\r?\n/).forEach(function(e){var n=e.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();t.append(r,o)}}),t}function m(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new i(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var g={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(g.arrayBuffer)var j=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],w=function(e){return e&&DataView.prototype.isPrototypeOf(e)},T=ArrayBuffer.isView||function(e){return e&&j.indexOf(Object.prototype.toString.call(e))>-1};i.prototype.append=function(e,n){e=t(e),n=o(n);var r=this.map[e];this.map[e]=r?r+","+n:n},i.prototype.delete=function(e){delete this.map[t(e)]},i.prototype.get=function(e){return e=t(e),this.has(e)?this.map[e]:null},i.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},i.prototype.set=function(e,n){this.map[t(e)]=o(n)},i.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},i.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),a(e)},i.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),a(e)},i.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),a(e)},g.iterable&&(i.prototype[Symbol.iterator]=i.prototype.entries);var O=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},h.call(y.prototype),h.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new i(this.headers),url:this.url})},m.error=function(){var e=new m(null,{status:0,statusText:""});return e.type="error",e};var _=[301,302,303,307,308];m.redirect=function(e,t){if(-1===_.indexOf(t))throw new RangeError("Invalid status code");return new m(null,{status:t,headers:{location:e}})},e.Headers=i,e.Request=y,e.Response=m,e.fetch=function(e,t){return new n(function(n,o){var a=new y(e,t),i=new r;i.onload=function(){var e={status:i.status,statusText:i.statusText,headers:b(i.getAllResponseHeaders()||"")};e.url="responseURL"in i?i.responseURL:e.headers.get("X-Request-URL");var t="response"in i?i.response:i.responseText;n(new m(t,e))},i.onerror=function(){o(new TypeError("Network request failed"))},i.ontimeout=function(){o(new TypeError("Network request failed"))},i.open(a.method,a.url,!0),"include"===a.credentials&&(i.withCredentials=!0),"responseType"in i&&g.blob&&(i.responseType="blob"),a.headers.forEach(function(e,t){i.setRequestHeader(t,e)}),i.send(void 0===a._bodyInit?null:a._bodyInit)})},e.fetch.polyfill=!0}}(void 0!==e?e:this),{fetch:e.fetch,Headers:e.Headers,Request:e.Request,Response:e.Response}}()}e.exports=n}("undefined"==typeof self?T:self)})(),_={atob:self.atob.bind(self),btoa:self.btoa.bind(self)},x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},A=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),S=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},P=function(){function e(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&s.return&&s.return()}finally{if(o)throw a}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),E=O.Headers,U=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};x(this,e),this.config(t)}return A(e,[{key:"config",value:function(e){var t=Object.assign({},this,e);t.endpoint&&t.endpoint.lastIndexOf("/")===t.endpoint.length-1&&(t.endpoint=t.endpoint.slice(0,-1)),this.endpoint=t.endpoint,this.username=t.username,this.password=t.password}},{key:"headers",value:function(){var e=new E;return e.append("Authorization","Basic "+_.btoa(this.username+":"+this.password)),e.append("Accept","*/*"),e}},{key:"uri",value:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.endpoint+"/"+t.join("/")}}]),e}(),B="object"==typeof self?self.FormData:window.FormData,I=function(e,n,r,o){n=n||"&",r=r||"=";var a={};if("string"!=typeof e||0===e.length)return a;var i=/\+/g;e=e.split(n);var s=1e3;o&&"number"==typeof o.maxKeys&&(s=o.maxKeys);var u=e.length;s>0&&u>s&&(u=s);for(var c=0;c<u;++c){var d,l,p,h,f=e[c].replace(i,"%20"),y=f.indexOf(r);y>=0?(d=f.substr(0,y),l=f.substr(y+1)):(d=f,l=""),p=decodeURIComponent(d),h=decodeURIComponent(l),t(a,p)?Array.isArray(a[p])?a[p].push(h):a[p]=[a[p],h]:a[p]=h}return a},C=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}},R=function(e,t,n,r){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map(function(r){var o=encodeURIComponent(C(r))+n;return Array.isArray(e[r])?e[r].map(function(e){return o+encodeURIComponent(C(e))}).join(t):o+encodeURIComponent(C(e[r]))}).join(t):r?encodeURIComponent(C(r))+n+encodeURIComponent(C(e)):""},q=e(function(e,t){t.decode=t.parse=I,t.encode=t.stringify=R}),D=function(e){return null!=e&&(n(e)||r(e)||!!e._isBuffer)},k=e(function(e){function t(e,t){function n(e,i,s){s=s||1,Object.keys(e).forEach(function(u){var c=e[u],d=t.safe&&Array.isArray(c),l=Object.prototype.toString.call(c),p=D(c),h="[object Object]"===l||"[object Array]"===l,f=i?i+r+u:u;if(!d&&!p&&h&&Object.keys(c).length&&(!t.maxDepth||s<o))return n(c,f,s+1);a[f]=c})}var r=(t=t||{}).delimiter||".",o=t.maxDepth,a={};return n(e),a}function n(e,t){function r(e){var t=Number(e);return isNaN(t)||-1!==e.indexOf(".")?e:t}var o=(t=t||{}).delimiter||".",a=t.overwrite||!1,i={};return D(e)||"[object Object]"!==Object.prototype.toString.call(e)?e:(Object.keys(e).forEach(function(s){for(var u=s.split(o),c=r(u.shift()),d=r(u[0]),l=i;void 0!==d;){var p=Object.prototype.toString.call(l[c]),h="[object Object]"===p||"[object Array]"===p;if(!a&&!h&&void 0!==l[c])return;(a&&!h||!a&&null==l[c])&&(l[c]="number"!=typeof d||t.object?{}:[]),l=l[c],u.length>0&&(c=r(u.shift()),d=r(u[0]))}l[c]=n(e[s],t)}),i)}e.exports=t;t.flatten=t,t.unflatten=n}),F=Array.isArray,z="object"==typeof T&&T&&T.Object===Object&&T,N="object"==typeof self&&self&&self.Object===Object&&self,L=z||N||Function("return this")(),J=L.Symbol,W=Object.prototype,G=W.hasOwnProperty,H=W.toString,$=J?J.toStringTag:void 0,M=function(e){var t=G.call(e,$),n=e[$];try{e[$]=void 0;var r=!0}catch(e){}var o=H.call(e);return r&&(t?e[$]=n:delete e[$]),o},K=Object.prototype.toString,X=function(e){return K.call(e)},V="[object Null]",Z="[object Undefined]",Q=J?J.toStringTag:void 0,Y=function(e){return null==e?void 0===e?Z:V:Q&&Q in Object(e)?M(e):X(e)},ee=function(e){return null!=e&&"object"==typeof e},te="[object Symbol]",ne=function(e){return"symbol"==typeof e||ee(e)&&Y(e)==te},re=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,oe=/^\w*$/,ae=function(e,t){if(F(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ne(e))||oe.test(e)||!re.test(e)||null!=t&&e in Object(t)},ie=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},se="[object AsyncFunction]",ue="[object Function]",ce="[object GeneratorFunction]",de="[object Proxy]",le=function(e){if(!ie(e))return!1;var t=Y(e);return t==ue||t==ce||t==se||t==de},pe=L["__core-js_shared__"],he=function(){var e=/[^.]+$/.exec(pe&&pe.keys&&pe.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),fe=function(e){return!!he&&he in e},ye=Function.prototype.toString,ve=function(e){if(null!=e){try{return ye.call(e)}catch(e){}try{return e+""}catch(e){}}return""},be=/[\\^$.*+?()[\]{}|]/g,me=/^\[object .+?Constructor\]$/,ge=Function.prototype,je=Object.prototype,we=ge.toString,Te=je.hasOwnProperty,Oe=RegExp("^"+we.call(Te).replace(be,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),_e=function(e){return!(!ie(e)||fe(e))&&(le(e)?Oe:me).test(ve(e))},xe=function(e,t){return null==e?void 0:e[t]},Ae=function(e,t){var n=xe(e,t);return _e(n)?n:void 0},Se=Ae(Object,"create"),Pe="__lodash_hash_undefined__",Ee=Object.prototype.hasOwnProperty,Ue=Object.prototype.hasOwnProperty,Be="__lodash_hash_undefined__";o.prototype.clear=function(){this.__data__=Se?Se(null):{},this.size=0},o.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},o.prototype.get=function(e){var t=this.__data__;if(Se){var n=t[e];return n===Pe?void 0:n}return Ee.call(t,e)?t[e]:void 0},o.prototype.has=function(e){var t=this.__data__;return Se?void 0!==t[e]:Ue.call(t,e)},o.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=Se&&void 0===t?Be:t,this};var Ie=o,Ce=function(e,t){return e===t||e!==e&&t!==t},Re=function(e,t){for(var n=e.length;n--;)if(Ce(e[n][0],t))return n;return-1},qe=Array.prototype.splice;a.prototype.clear=function(){this.__data__=[],this.size=0},a.prototype.delete=function(e){var t=this.__data__,n=Re(t,e);return!(n<0||(n==t.length-1?t.pop():qe.call(t,n,1),--this.size,0))},a.prototype.get=function(e){var t=this.__data__,n=Re(t,e);return n<0?void 0:t[n][1]},a.prototype.has=function(e){return Re(this.__data__,e)>-1},a.prototype.set=function(e,t){var n=this.__data__,r=Re(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this};var De=a,ke=Ae(L,"Map"),Fe=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e},ze=function(e,t){var n=e.__data__;return Fe(t)?n["string"==typeof t?"string":"hash"]:n.map};i.prototype.clear=function(){this.size=0,this.__data__={hash:new Ie,map:new(ke||De),string:new Ie}},i.prototype.delete=function(e){var t=ze(this,e).delete(e);return this.size-=t?1:0,t},i.prototype.get=function(e){return ze(this,e).get(e)},i.prototype.has=function(e){return ze(this,e).has(e)},i.prototype.set=function(e,t){var n=ze(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this};var Ne=i,Le="Expected a function";s.Cache=Ne;var Je=s,We=500,Ge=/^\./,He=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,$e=/\\(\\)?/g,Me=function(e){var t=Je(e,function(e){return n.size===We&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return Ge.test(e)&&t.push(""),e.replace(He,function(e,n,r,o){t.push(r?o.replace($e,"$1"):n||e)}),t}),Ke=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o},Xe=1/0,Ve=J?J.prototype:void 0,Ze=Ve?Ve.toString:void 0,Qe=u,Ye=function(e){return null==e?"":Qe(e)},et=function(e,t){return F(e)?e:ae(e,t)?[e]:Me(Ye(e))},tt=1/0,nt=function(e){if("string"==typeof e||ne(e))return e;var t=e+"";return"0"==t&&1/e==-tt?"-0":t},rt=function(e,t){for(var n=0,r=(t=et(t,e)).length;null!=e&&n<r;)e=e[nt(t[n++])];return n&&n==r?e:void 0},ot=function(e,t,n){var r=null==e?void 0:rt(e,t);return void 0===r?n:r},at=function(){try{var e=Ae(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),it=function(e,t,n){"__proto__"==t&&at?at(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n},st=Object.prototype.hasOwnProperty,ut=function(e,t,n){var r=e[t];st.call(e,t)&&Ce(r,n)&&(void 0!==n||t in e)||it(e,t,n)},ct=9007199254740991,dt=/^(?:0|[1-9]\d*)$/,lt=function(e,t){return!!(t=null==t?ct:t)&&("number"==typeof e||dt.test(e))&&e>-1&&e%1==0&&e<t},pt=function(e,t,n,r){if(!ie(e))return e;for(var o=-1,a=(t=et(t,e)).length,i=a-1,s=e;null!=s&&++o<a;){var u=nt(t[o]),c=n;if(o!=i){var d=s[u];void 0===(c=r?r(d,u,s):void 0)&&(c=ie(d)?d:lt(t[o+1])?[]:{})}ut(s,u,c),s=s[u]}return e},ht=function(e,t,n){for(var r=-1,o=t.length,a={};++r<o;){var i=t[r],s=rt(e,i);n(s,i)&&pt(a,et(i,e),s)}return a},ft=function(e,t){return null!=e&&t in Object(e)},yt="[object Arguments]",vt=function(e){return ee(e)&&Y(e)==yt},bt=Object.prototype,mt=bt.hasOwnProperty,gt=bt.propertyIsEnumerable,jt=vt(function(){return arguments}())?vt:function(e){return ee(e)&&mt.call(e,"callee")&&!gt.call(e,"callee")},wt=9007199254740991,Tt=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=wt},Ot=function(e,t,n){for(var r=-1,o=(t=et(t,e)).length,a=!1;++r<o;){var i=nt(t[r]);if(!(a=null!=e&&n(e,i)))break;e=e[i]}return a||++r!=o?a:!!(o=null==e?0:e.length)&&Tt(o)&&lt(i,o)&&(F(e)||jt(e))},_t=function(e,t){return null!=e&&Ot(e,t,ft)},xt=function(e,t){return ht(e,t,function(t,n){return _t(e,n)})},At=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e},St=J?J.isConcatSpreadable:void 0,Pt=function(e){return F(e)||jt(e)||!!(St&&e&&e[St])},Et=c,Ut=function(e){return(null==e?0:e.length)?Et(e,1):[]},Bt=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)},It=Math.max,Ct=function(e,t,n){return t=It(void 0===t?e.length-1:t,0),function(){for(var r=arguments,o=-1,a=It(r.length-t,0),i=Array(a);++o<a;)i[o]=r[t+o];o=-1;for(var s=Array(t+1);++o<t;)s[o]=r[o];return s[t]=n(i),Bt(e,this,s)}},Rt=function(e){return function(){return e}},qt=at?function(e,t){return at(e,"toString",{configurable:!0,enumerable:!1,value:Rt(t),writable:!0})}:function(e){return e},Dt=800,kt=16,Ft=Date.now,zt=function(e){var t=0,n=0;return function(){var r=Ft(),o=kt-(r-n);if(n=r,o>0){if(++t>=Dt)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(qt),Nt=function(e){return zt(Ct(e,void 0,Ut),e+"")}(function(e,t){return null==e?{}:xt(e,t)}),Lt=["status","statusText","headers","ok","url"],Jt={httpBody:function(e){var t=e.headers.get("content-type"),n=Nt(e,Lt);return t&&t.indexOf("json")>-1?e.json().then(function(e){return n.body=e,n}):e.text().then(function(r){var o=r.trim();return n.body=o,"text/boolean"===t&&(n.body="true"===o.toLowerCase()),204===e.status&&(n.body=null),""===o&&(n.body=null),n})}},Wt={database:{archetypes:null,connection:{timeout:null},creator:null,name:null,namespaces:null,online:null,time:{creation:null}},docs:{default:{rdf:{extractors:null},text:{extractors:null}},filesystem:{uri:null},path:null},icv:{active:{graphs:null},consistency:{automatic:null},enabled:null,reasoning:{enabled:null}},index:{differential:{enable:{limit:null},merge:{limit:null},size:null},disk:{page:{count:{total:null,used:null},fill:{ratio:null}}},last:{tx:null},literals:{canonical:null},named:{graphs:null},persist:null,size:null,statistics:{update:{automatic:null}},type:null},preserve:{bnode:{ids:null}},progress:{monitor:{enabled:null}},query:{all:{graphs:null},plan:{reuse:null},timeout:null},reasoning:{approximate:null,classify:{eager:null},consistency:{automatic:null},punning:{enabled:null},sameas:null,schema:{graphs:null,timeout:null},type:null,virtual:{graph:{enabled:null}}},search:{default:{limit:null},enabled:null,index:{datatypes:null},reindex:{tx:null},wildcard:{search:{enabled:null}}},security:{named:{graphs:null}},spatial:{enabled:null,index:{version:null},precision:null},strict:{parsing:null},transaction:{isolation:null,logging:null},versioning:{directory:null,enabled:null}},Gt=O.fetch,Ht=Jt.httpBody,$t=function(e,t,n){return t.headers.append("Content-Type","application/json"),Gt(e.uri("admin","databases",t.database,"options"),{method:t.method,headers:t.headers,body:JSON.stringify(k(n))})},Mt={get:function(e,t,n){var r=e.headers();return $t(e,{headers:r,database:t,method:"PUT"},Wt).then(Ht).then(function(e){return 200===e.status?Object.assign({},e,{body:k.unflatten(e.body)}):e})},set:function(e,t,n,r){var o=e.headers();return $t(e,{headers:o,database:t,method:"POST"},n).then(Ht)}},Kt=O.fetch,Xt=Jt.httpBody,Vt=Mt.get,Zt=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=e.headers();o.append("Accept","text/plan"),o.append("Content-Type",t.contentType||"text/plain"),t.encoding&&o.append("Content-Encoding",t.encoding);var a={};r.graphUri&&(a["graph-uri"]=r.graphUri);var i=q.stringify(a),s=e.uri(t.database,t.transactionId,t.resource)+(i.length>0?"?"+i:"");return Kt(s,{method:"POST",headers:o,body:t.content+""}).then(Xt).then(function(e){return Object.assign({},e,{transactionId:t.transactionId})})},Qt={create:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=(arguments[4],e.headers()),a=k(n),i=new B;return i.append("root",JSON.stringify({dbname:t,options:a,files:r.files})),Kt(e.uri("admin","databases"),{method:"POST",headers:o,body:i}).then(Xt)},drop:function(e,t,n){var r=e.headers();return Kt(e.uri("admin","databases",t),{method:"DELETE",headers:r}).then(Xt)},get:function(e,t,n){var r=e.headers();return Kt(e.uri(t),{headers:r}).then(Xt)},offline:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),Kt(e.uri("admin","databases",t,"offline"),{method:"PUT",headers:r}).then(Xt)},online:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),Kt(e.uri("admin","databases",t,"online"),{method:"PUT",headers:r}).then(Xt)},optimize:function(e,t,n){var r=e.headers();return Kt(e.uri("admin","databases",t,"optimize"),{method:"PUT",headers:r}).then(Xt)},copy:function(e,t,n,r){var o=e.headers();o.append("Accept","application/json");var a=e.uri("admin","databases",t,"copy")+"?"+q.stringify({to:n});return Kt(a,{method:"PUT",headers:o}).then(Xt)},list:function(e,t){var n=e.headers();return n.append("Accept","application/json"),Kt(e.uri("admin","databases"),{headers:n}).then(Xt)},size:function(e,t,n){var r=e.headers();return r.append("Accept","text/plain"),Kt(e.uri(t,"size"),{headers:r}).then(Xt)},clear:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=e.headers();o.append("Accept","text/plain");var a={};r.graphUri&&(a["graph-uri"]=r.graphUri);var i=q.stringify(a),s=e.uri(t,n,"clear")+(i.length>0?"?"+i:"");return Kt(s,{method:"POST",headers:o}).then(Xt).then(function(e){return Object.assign({},e,{transactionId:n})})},add:function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};return Zt(e,{contentType:o.contentType,encoding:o.encoding,resource:"add",database:t,transactionId:n,content:r},a)},remove:function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};return Zt(e,{contentType:o.contentType,encoding:o.encoding,resource:"remove",database:t,transactionId:n,content:r},a)},namespaces:function(e,t,n){return Vt(e,t,n).then(function(e){if(200===e.status){var t=ot(e,"body.database.namespaces",[]).reduce(function(e,t){var n=t.split("="),r=P(n,2),o=r[0],a=r[1];return Object.assign({},e,S({},o,a))},{});e.body=t}return e})},exportData:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=e.headers();o.append("Accept",n.mimetype||"application/ld+json");var a={"graph-uri":r.graphUri||"tag:stardog:api:context:all"},i=e.uri(t,"export")+"?"+q.stringify(a);return Kt(i,{headers:o}).then(Xt)}},Yt=O.fetch,en=Jt.httpBody,tn={add:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],e.headers());return o.append("Content-Type",r.contentType||"text/turtle"),Yt(e.uri(t,"icv","add"),{method:"POST",body:n,headers:o}).then(en)},remove:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],e.headers());return o.append("Content-Type",r.contentType||"text/turtle"),Yt(e.uri(t,"icv","remove"),{method:"POST",body:n,headers:o}).then(en)},get:function(e,t){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var n=e.headers();return n.append("Accept","application/ld+json"),Yt(e.uri(t,"icv"),{headers:n}).then(en)},clear:function(e,t){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var n=e.headers();return Yt(e.uri(t,"icv","clear"),{method:"POST",headers:n}).then(en)},convert:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=e.headers();a.append("Content-Type",r.contentType||"text/turtle");var i={};o.graphUri&&(i["graph-uri"]=o.graphUri);var s=q.stringify(i),u=e.uri(t,"icv","convert")+(s.length>0?"?"+s:"");return Yt(u,{method:"POST",body:n,headers:a}).then(en)},validate:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=e.headers();a.append("Content-Type",r.contentType||"text/turtle"),a.append("Accept","text/boolean");var i={};o.graphUri&&(i["graph-uri"]=o.graphUri);var s=q.stringify(i),u=e.uri(t,"icv","validate")+(s.length>0?"?"+s:"");return Yt(u,{method:"POST",body:n,headers:a}).then(en)},validateInTx:function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},i=e.headers();i.append("Content-Type",o.contentType||"text/turtle"),i.append("Accept","text/boolean");var s={};a.graphUri&&(s["graph-uri"]=a.graphUri);var u=q.stringify(s),c=e.uri(t,"icv",n,"validate")+(u.length>0?"?"+u:"");return Yt(c,{method:"POST",body:r,headers:i}).then(en)},violations:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=e.headers();a.append("Content-Type",r.contentType||"text/turtle"),a.append("Accept","application/ld+json");var i={};o.graphUri&&(i["graph-uri"]=o.graphUri);var s=q.stringify(i),u=e.uri(t,"icv","violations")+(s.length>0?"?"+s:"");return Yt(u,{method:"POST",body:n,headers:a}).then(en)},violationsInTx:function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},i=e.headers();i.append("Content-Type",o.contentType||"text/turtle"),i.append("Accept","application/ld+json");var s={};a.graphUri&&(s["graph-uri"]=a.graphUri);var u=q.stringify(s),c=e.uri(t,"icv",n,"violations")+(u.length>0?"?"+u:"");return Yt(c,{method:"POST",body:r,headers:i}).then(en)}},nn=O.fetch,rn=Jt.httpBody,on=function(e){return function(t){return Object.assign({},t,{transactionId:e})}},an={begin:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),nn(e.uri(t,"transaction","begin"),{method:"POST",headers:r}).then(rn).then(function(e){return Object.assign({},e,{transactionId:e.body})})},rollback:function(e,t,n,r){var o=e.headers();return nn(e.uri(t,"transaction","rollback",n),{method:"POST",headers:o}).then(rn).then(on(n))},commit:function(e,t,n,r){var o=e.headers();return nn(e.uri(t,"transaction","commit",n),{method:"POST",headers:o}).then(rn).then(on(n))}},sn=O.fetch,un=Jt.httpBody,cn=function(e){return e.headers.append("content-type","application/json"),e},dn={consistency:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=(arguments.length>3&&void 0!==arguments[3]&&arguments[3],e.headers());r.append("Accept","text/boolean");var o=e.uri(t,"reasoning","consistency")+(n.namedGraph?"?graph-uri="+n.namedGraph:"");return sn(o,{headers:r}).then(un)},explainInference:function(e,t,n,r,o){var a=e.headers();return a.append("content-type",r.contentType),a.append("accept","application/json"),sn(e.uri(t,"reasoning","explain"),{method:"POST",headers:a,body:n}).then(cn).then(un)},explainInconsistency:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=(arguments.length>3&&void 0!==arguments[3]&&arguments[3],e.headers());r.append("accept","application/json");var o=e.uri(t,"reasoning","explain","inconsistency")+(n.namedGraph?"?graph-uri="+n.namedGraph:"");return sn(o,{method:"POST",headers:r}).then(cn).then(un)},explainInferenceInTransaction:function(e,t,n,r,o){arguments.length>5&&void 0!==arguments[5]&&arguments[5];var a=e.headers();return a.append("Content-Type",o.contentType),o.encoding&&a.append("Content-Encoding",o.encoding),sn(e.uri(t,"reasoning",n,"explain"),{method:"POST",headers:a,body:r}).then(un)},explainInconsistencyInTransaction:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],e.headers()),a=e.uri(t,"reasoning",n,"explain","inconsistency")+(r.namedGraph?"?graph-uri="+r.namedGraph:"");return sn(a,{method:"POST",headers:o}).then(un)},schema:function(e,t){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var n=e.headers();return n.append("Accept","application/ld+json"),sn(e.uri(t,"reasoning","schema"),{headers:n}).then(un)}},ln=Object.assign({},Qt,{icv:tn},{transaction:an},{options:Mt},{reasoning:dn}),pn=function(e){var t=e.replace(/prefix[^:]+:\s*<[^>]*>\s*/gi,"").replace(/^((base\s+<[^>]*>\s*)|([\t ]*#([^\n\r]*)))([\r|\r\n|\n])/gim,"").replace(/\s/g,"").toLowerCase();return t.startsWith("select")?"select":t.startsWith("ask")?"ask":t.startsWith("construct")?"construct":t.startsWith("describe")?"describe":t.startsWith("insert")||t.startsWith("delete")||t.startsWith("with")||t.startsWith("load")||t.startsWith("clear")||t.startsWith("create")||t.startsWith("drop")||t.startsWith("copy")||t.startsWith("move")||t.startsWith("add")?"update":t.startsWith("paths")?"paths":null},hn={queryType:pn,mimeType:function(e){var t=pn(e);return"select"===t||"paths"===t?"application/sparql-results+json":"ask"===t||"update"===t?"text/boolean":"construct"===t||"describe"===t?"application/ld+json":null}},fn=O.fetch,yn=Jt.httpBody,vn=hn.mimeType,bn=hn.queryType,mn=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=e.headers();o.append("Accept",n.accept||t.accept),o.append("Content-Type","application/x-www-form-urlencoded");var a=q.stringify(r),i=e.uri(t.database,t.resource)+(a.length>0?"?"+a:"");return fn(i,{method:"POST",body:q.stringify({query:t.query}),headers:o}).then(yn)},gn=function(e,t,n,r,o){var a=bn(n);return mn(e,{database:t,query:n,accept:vn(n),resource:"update"===a?"update":"query"},r,o)},jn={execute:gn,executeInTransaction:function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},i=e.headers();i.append("Accept",o.accept||vn(r)),i.append("Content-Type","application/x-www-form-urlencoded");var s=q.stringify(a),u=e.uri(t,n,"query")+(s.length>0?"?"+s:"");return fn(u,{method:"POST",headers:i,body:q.stringify({query:r})}).then(yn).then(function(e){return Object.assign({},e,{transactionId:n})})},property:function(e,t,n,r){return gn(e,t,"select * where {\n      "+n.uri+" "+n.property+" ?val\n    }\n    ",r).then(function(e){var t=ot(e,"body.results.bindings",[]);return t.length>0?Object.assign({},e,{body:t[0].val.value}):e})},list:function(e){var t=e.headers();return t.append("Accept","application/json"),fn(e.uri("admin","queries"),{headers:t}).then(yn)},kill:function(e,t){var n=e.headers();return fn(e.uri("admin","queries",t),{method:"DELETE",headers:n}).then(yn)},get:function(e,t){var n=e.headers();return n.append("Accept","application/json"),fn(e.uri("admin","queries",t),{headers:n}).then(yn)},explain:function(e,t,n,r){var o=e.headers();o.append("Accept","text/plain"),o.append("Content-Type","application/x-www-form-urlencoded");var a=q.stringify(r),i=e.uri(t,"explain")+(a.length>0?"?"+a:"");return fn(i,{method:"POST",headers:o,body:q.stringify({query:n})}).then(yn)}},wn=O.fetch,Tn=Jt.httpBody,On={create:function(e,t,n){var r=e.headers();r.append("Content-Type","application/json"),r.append("Accept","application/json");var o=Nt(t,["name","database","query","shared"]);return o.creator=e.username,o.shared="boolean"==typeof o.shared&&o.shared,wn(e.uri("admin","queries","stored"),{headers:r,method:"POST",body:JSON.stringify(o)}).then(Tn)},list:function(e,t){var n=e.headers();return n.append("Accept","application/json"),wn(e.uri("admin","queries","stored"),{headers:n}).then(Tn)},remove:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),wn(e.uri("admin","queries","stored",t),{headers:r,method:"DELETE"}).then(Tn)}},_n=Object.assign({},jn,{stored:On}),xn=O.fetch,An=Jt.httpBody,Sn=Jt.httpMessage,Pn={list:function(e,t){var n=e.headers();return xn(e.uri("admin","users"),{headers:n}).then(An)},get:function(e,t,n){var r=e.headers();return xn(e.uri("admin","users",t),{headers:r}).then(An)},create:function(e,t,n){var r=e.headers();r.append("Accept","application/json"),r.append("Content-Type","application/json");var o={username:t.name,password:t.password.split(""),superuser:"boolean"==typeof t.superuser&&t.superuser};return xn(e.uri("admin","users"),{method:"POST",headers:r,body:JSON.stringify(o)}).then(An)},changePassword:function(e,t,n,r){var o=e.headers();o.append("Accept","application/json");var a={password:n};return xn(e.uri("admin","users",t,"pwd"),{method:"PUT",headers:o,body:JSON.stringify(a)}).then(Sn)},valid:function(e,t){var n=e.headers();return xn(e.uri("admin","users","valid"),{headers:n}).then(An)},enabled:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),xn(e.uri("admin","users",t,"enabled"),{headers:r}).then(An)},enable:function(e,t,n,r){var o=e.headers();return xn(e.uri("admin","users",t,"enabled"),{method:"PUT",headers:o,body:JSON.stringify({enabled:n})}).then(Sn)},setRoles:function(e,t,n,r){var o=e.headers();return xn(e.uri("admin","users",t,"roles"),{method:"PUT",headers:o,body:JSON.stringify({roles:n})}).then(Sn)},listRoles:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),xn(e.uri("admin","users",t,"roles"),{headers:r}).then(An)},assignPermission:function(e,t,n,r){var o=e.headers(),a={action:n.action,resource_type:n.resourceType,resource:n.resources};return xn(e.uri("admin","permissions","user",t),{method:"PUT",headers:o,body:JSON.stringify(a)}).then(Sn)},deletePermission:function(e,t,n,r){var o=e.headers();o.append("Content-Type","application/json");var a={action:n.action,resource_type:n.resourceType,resource:n.resources};return xn(e.uri("admin","permissions","user",t,"delete"),{method:"POST",headers:o,body:JSON.stringify(a)}).then(Sn)},permissions:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),xn(e.uri("admin","permissions","user",t),{headers:r}).then(An)},effectivePermissions:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),xn(e.uri("admin","permissions","effective","user",t),{headers:r}).then(An)},superUser:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),xn(e.uri("admin","users",t,"superuser"),{headers:r}).then(An)},remove:function(e,t,n){var r=e.headers();return xn(e.uri("admin","users",t),{method:"DELETE",headers:r}).then(Sn)}},En=O.fetch,Un=Jt.httpBody,Bn=Jt.httpMessage,In={create:function(e,t,n){var r=e.headers();return En(e.uri("admin","roles"),{method:"POST",headers:r,body:JSON.stringify({rolename:t.name})}).then(Bn)},list:function(e,t){var n=e.headers();return n.append("Accept","application/json"),En(e.uri("admin","roles"),{headers:n}).then(Un)},remove:function(e,t,n){var r=e.headers();return En(e.uri("admin","roles",t),{method:"DELETE",headers:r}).then(Bn)},usersWithRole:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),En(e.uri("admin","roles",t,"users"),{headers:r}).then(Un)},assignPermission:function(e,t,n,r){var o=e.headers();o.append("Content-Type","application/json");var a={action:n.action,resource_type:n.resourceType,resource:n.resources};return En(e.uri("admin","permissions","role",t),{method:"PUT",headers:o,body:JSON.stringify(a)}).then(Un)},deletePermission:function(e,t,n,r){var o=e.headers();o.append("Content-Type","application/json");var a={action:n.action,resource_type:n.resourceType,resource:n.resources};return En(e.uri("admin","permissions","role",t,"delete"),{method:"POST",headers:o,body:JSON.stringify(a)}).then(Bn)},permissions:function(e,t,n){var r=e.headers();return r.append("Accept","application/json"),En(e.uri("admin","permissions","role",t),{headers:r}).then(Un)}},Cn=Object.assign({},Pn,{role:In}),Rn=O.fetch,qn=Jt.httpMessage,Dn={shutdown:function(e,t){var n=e.headers();return n.append("Accept","application/json"),Rn(e.uri("admin","shutdown"),{headers:n}).then(qn)}};return{version:(w&&j||w).version,Connection:U,db:ln,query:_n,user:Cn,server:Dn}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
